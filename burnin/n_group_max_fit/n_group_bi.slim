// Keywords: identity by state, uniquing, unique down, back mutation, two alleles

initialize() {
//	setSeed(8301386815623071564);
	initializeSLiMOptions(keepPedigrees=T);
	defineConstant("maxL", 50000);
	defineConstant("U", 0.03);
	defineConstant("N", 1000);
	defineConstant("Vs", 2*N);
	defineConstant("shift_time", 10*N);
	defineConstant("end_time", shift_time);
	defineGlobal("L", 500);
	defineGlobal("mutated_sites", rep(F, maxL));

	
	defineGlobal("Va0_sqrt", -1);	
	defineGlobal("mutToAdd", 0);
	defineGlobal("optimum", 0.0);
	
//	defineConstant("ID", "-2");
//	defineConstant("folder", "tsv_output/social_new/temp");
//	defineConstant("psi", 0.1);
//	defineConstant("fre_output",folder+ "/"+ "rec_N_"+N+"_psi_"+psi+"_burnin_"+ID+".tsv");	
	defineConstant("pop_output",folder+ "/"+ "rec_N_"+N+"_psi_"+psi+"_n_"+n+"_pop_"+ID+".pop");	
//    defineConstant("n", 3);
	
	// m2 models a biallelic locus; an m2 mutation is "A",
	// absence of an m2 mutation is "a"; "aa" is neutral
	script = "a=sqrt(rexp(1, 1)); if (runif(1) < 0.5) -a; else a;";
	initializeMutationType("m2", 0.5, "s", script);
//	m2.convertToSubstitution = F;
	m2.color = "red";
	
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElement(g1, 0, maxL-1);
	initializeMutationRate(c(U/L, 0), c(L-1,maxL-1));
	initializeRecombinationRate(c(0.5, 0), c(L-1,maxL-1));
//	initializeRecombinationRate(0.5);
}
1 early() {
	sim.addSubpop("p1", N);
}

mutationEffect(m2) { return 1.0; }

mutation(m2) {
	// mutation exist at mut.position, reject the new mutation
	if (any(p1.haplosomes.containsMarkerMutation(m2, mut.position))){
		if (L<(maxL-1)){
			defineGlobal("mutToAdd", mutToAdd+1);
		}else{
			print("max L has reached");
			sim.simulationFinished();
		}
		return F;
	}
	return T;
}

late() {
	if(mutToAdd!=0){
		mutatedPos = unique(p1.haplosomes.mutations).position;
		if (L+mutToAdd<= maxL){
			// within maxL
			if (length(mutatedPos)+mutToAdd > L){
				//extend the region
				defineGlobal("L", L+mutToAdd-(L-length(mutatedPos)));
				p1.haplosomes.chromosome.setMutationRate(c(U/L, 0), c(L-1,maxL-1));
				p1.haplosomes.chromosome.setRecombinationRate(c(0.5, 0), c(L-1,maxL-1));
			}
			
			availableSites = setDifference(0:(L-1), mutatedPos);
			haplosomes = sample(p1.haplosomes, mutToAdd, replace=T);
			for (i in 0:(length(availableSites)-1)){
				if (i==mutToAdd) break;
				haplosomes[i].addNewDrawnMutation(m2, availableSites[i]);
			}
		}else{
			print(community.tick+": max L has reached with current L="+L+" and "+mutToAdd+" new mut");
			sim.simulationFinished();
		}
		defineGlobal("mutToAdd", 0);
	}
	
	calculate_phenotype(p1);
}

late(){
	if(community.tick % 500 == 0){
		print("at tick "+community.tick);
	}
}

end_time late() { 
	sim.outputFull(filePath=pop_output, binary=T, pedigreeIDs=T, objectTags=T, substitutions=T); 
}

function (void) calculate_phenotype(o<Subpopulation>$ p){
	e = rnorm(N, mean=0, sd=0);
	
	// evaluate and save the additive effects of QTLs
	inds = p.individuals;
	
	a = inds.sumOfMutationsOfType(m2) + 2*sum(sim.substitutions.selectionCoeff);
	
	shuffled = sample(inds, N, replace=F);
	phenotype = float(N);
	
	for (i in seq(0, N-n, by=n)) {
		groups = shuffled[i:(i+n-1)];
        as = a[groups.index];
		fits = dnorm(as, optimum, sqrt(Vs));

        for (j in groups){
            a1 = a[j.index];
			best_i = whichMax(fits);
			best_a = as[best_i];
            phenotype[j.index] = a1 * (1-psi) + psi * best_a;
        }
	}
	
	abs_fitness = dnorm(phenotype, optimum, sqrt(Vs));
	inds.fitnessScaling = abs_fitness;
	inds.tagF = phenotype;
}
