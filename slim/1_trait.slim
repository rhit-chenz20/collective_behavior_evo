// Keywords: migration, dispersal, QTL, quantitative trait loci

initialize() {
	
	initializeMutationRate(1e-6);
	
//	defineConstant("ID", "5");
	defineConstant("pop_size", 500);
	defineConstant("neighbor_size", 250);
	defineConstant("psi11", 0.7);
	defineGlobal("optimum", 10.0);
	
	defineConstant("fre_output", "tsv_output/psi11_"+psi11+"_neisize_"+neighbor_size+"_opt_"+optimum+"_"+ID+".tsv");
	
	// neutral mutations in non-coding regions
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	// mutations representing alleles in QTLs
	scriptForQTLs = "if (runif(1) < 0.5) -1; else 1;";
	initializeMutationType("m2", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g2", m2, 1.0);
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l";
	
	// set up our chromosome: 10 QTLs, surrounded by neutral regions
	defineConstant("C", 10);    // number of QTLs
	defineConstant("W", 1000);  // size of neutral buffer on each side
	pos = 0;
	q = NULL;
	
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		
		initializeGenomicElement(g2, pos, pos);
		q = c(q, pos);
		pos = pos + 1;
		
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
	}
	
	defineConstant("Q", q);     // remember our QTL positions
	
	// we want the QTLs to be unlinked; build a recombination map for that
	rates = c(rep(c(1e-8, 0.5), C-1), 1e-8);
	ends = (repEach(Q + W, 2) + rep(c(0,1), C))[0:(C*2 - 2)];
	initializeRecombinationRate(rates, ends);
}
1 late() {
	sim.addSubpop("p1", pop_size);
	
	// replicate the s1 event to output in tick 2 also
	community.registerEarlyEvent("s2", s1.source, 2, 2);
	
	// optional: give m2 mutations to everyone, as standing variation
	g = sim.subpopulations.genomes;
	
	for (q in Q)
	{
		isPlus = asLogical(rbinom(size(g), 1, 0.5));
		g[isPlus].addNewMutation(m2, 1.0, q);
		g[!isPlus].addNewMutation(m2, -1.0, q);
	}
	
	log = community.createLogFile(fre_output, sep="\t");
	log.addCycle();
	
	for (q in Q)
	{
		log.addSuppliedColumn("pf_"+q);
	}

	log.addMeanSDColumns("z1", "p1.individuals.tagF;");
	log.addMeanSDColumns("a1", "p1.individuals.sumOfMutationsOfType(m2);");
	log.addMeanSDColumns("fitness", "p1.cachedFitness(NULL);");
	
	defineGlobal("fq_log", log);
}

mutationEffect(m2) { return 1.0; }

1: late() {
	e1 = rnorm(pop_size, mean=0, sd=1);
	
	// evaluate and save the additive effects of QTLs
	inds = p1.individuals;
	
	a1 = inds.sumOfMutationsOfType(m2);
	
	phenotype = NULL;
	
	for (ind in inds){
		neighbors = p1.sampleIndividuals(neighbor_size, exclude=ind);
		a1f = a1[ind.index];
		e1f = e1[ind.index];
		
		a1p = a1[neighbors.index];
		e1p = e1[neighbors.index];
		
		z1 = mean((a1f+e1f+psi11*(a1p+e1p))/(1-psi11*psi11));
		
		phenotype = c(phenotype, z1);
	}
	
	oldz1m = p1.getValue("z1m");
	p1.setValue("z1m", c(oldz1m, phenotype));
	
	inds.fitnessScaling = 1.0 + dnorm(optimum - phenotype, 0.0, 1.0);
	inds.tagF = phenotype;

}

2: early(){
	if(sim.cycle == 2 | sim.cycle % 10 == 0){
		muts = sim.mutationsOfType(m2);
		plus = muts[muts.selectionCoeff == 1.0];
		minus = muts[muts.selectionCoeff == -1.0];
		for (q in Q)
		{
			qPlus = plus[plus.position == q];
			qMinus = minus[minus.position == q];
			pf = sum(sim.mutationFrequencies(NULL, qPlus));
			mf = sum(sim.mutationFrequencies(NULL, qMinus));
			fq_log.setSuppliedValue("pf_"+q, pf);	
		}
		fq_log.logRow();
	}
}

s1 3000 early() {
	cat("-------------------------------\n");
	cat("Output for end of cycle " + (sim.cycle - 1) + ":\n\n");
	
	// Output population fitness values
	cat("p1 mean fitness = " + mean(p1.cachedFitness(NULL)) + "\n");
	
	// Output population additive QTL-based phenotypes
	cat("p1 mean phenotype under selection = " + mean(p1.individuals.tagF) + "\n");
	
	z1m = p1.getValue("z1m");
	cat("p1 mean z1 = " + mean(z1m[(size(z1m)-pop_size):(size(z1m)-1)]) + "\n");
	
	// Output frequencies of +1/-1 alleles at the QTLs
	muts = sim.mutationsOfType(m2);
	plus = muts[muts.selectionCoeff == 1.0];
	minus = muts[muts.selectionCoeff == -1.0];
	
	cat("\nOverall frequencies:\n\n");
	for (q in Q)
	{
		qPlus = plus[plus.position == q];
		qMinus = minus[minus.position == q];
		pf = sum(sim.mutationFrequencies(NULL, qPlus));
		mf = sum(sim.mutationFrequencies(NULL, qMinus));
		
		cat("   QTL1 " + q + ": f(+) == " + pf + ", f(-) == " + mf + "\n");
	}
}
