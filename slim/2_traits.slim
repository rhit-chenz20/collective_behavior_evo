// Keywords: migration, dispersal, QTL, quantitative trait loci

initialize() {
	initializeMutationRate(1e-6);
	
	defineConstant("pop_size", 5);
	defineConstant("neighbor_size", 2);
	defineConstant("psi12", 0.5);
	defineConstant("psi21", 0.0);
	defineGlobal("optimum", 5);
	
	// neutral mutations in non-coding regions
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	// mutations representing alleles in QTLs
	scriptForQTLs = "if (runif(1) < 0.5) -1; else 1;";
	initializeMutationType("m2", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g2", m2, 1.0);
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l";
	
	initializeMutationType("m3", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g3", m3, 1.0);
	m3.convertToSubstitution = F;
	m3.mutationStackPolicy = "l";
	
	// set up our chromosome: 10 QTLs, surrounded by neutral regions
	defineConstant("C", 20);    // number of QTLs
	bound = C/2;
	defineConstant("W", 1000);  // size of neutral buffer on each side
	pos = 0;
	q1 = NULL;
	q2 = NULL;
	
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		
		if (i < bound){
			initializeGenomicElement(g2, pos, pos);
			q1 = c(q1, pos);
		}else{
			initializeGenomicElement(g3, pos, pos);
			q2 = c(q2, pos);
		}
		pos = pos + 1;
		
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
	}
	
	defineConstant("Q1", q1);     // remember our QTL positions
	defineConstant("Q2", q2);     // remember our QTL positions
	
	Q = c(q1, q2);
	
	// we want the QTLs to be unlinked; build a recombination map for that
	rates = c(rep(c(1e-8, 0.5), C-1), 1e-8);
	ends = (repEach(Q + W, 2) + rep(c(0,1), C))[0:(C*2 - 2)];
	initializeRecombinationRate(rates, ends);
}
1 late() {
	sim.addSubpop("p1", pop_size);
	
	// replicate the s1 event to output in tick 2 also
	community.registerEarlyEvent("s2", s1.source, 2, 2);
	
	// optional: give m2 mutations to everyone, as standing variation
	g = sim.subpopulations.genomes;
	
	for (q in Q1)
	{
		isPlus = asLogical(rbinom(size(g), 1, 0.5));
		g[isPlus].addNewMutation(m2, 1.0, q);
		g[!isPlus].addNewMutation(m2, -1.0, q);
	}
	for (q in Q2)
	{
		isPlus = asLogical(rbinom(size(g), 1, 0.5));
		g[isPlus].addNewMutation(m3, 1.0, q);
		g[!isPlus].addNewMutation(m3, -1.0, q);
	}
}
mutationEffect(m2) { return 1.0; }
mutationEffect(m3) { return 1.0; } 
1: late() {
	e1 = rnorm(pop_size, mean=0, sd=1);
	e2 = rnorm(pop_size, mean=0, sd=1);
	
	// evaluate and save the additive effects of QTLs
	inds = p1.individuals;
	
	a1 = inds.sumOfMutationsOfType(m2);
	a2 = inds.sumOfMutationsOfType(m3);
	
	z1l = NULL;
	z2l = NULL;
	
	for (ind in inds){
		neighbors = p1.sampleIndividuals(neighbor_size, exclude=ind);
		a1f = a1[ind.index];
		e1f = e1[ind.index];
		a2f = a2[ind.index];
		e2f = e2[ind.index];
		
		a1p = a1[neighbors.index];
		a2p = a2[neighbors.index];
		e1p = e1[neighbors.index];
		e2p = e2[neighbors.index];
		
		z1 = mean((a1f+e1f+psi12*(a2p+e2p))/(1-psi12*psi21));
		z2 = mean((a2f+e2f+psi21*(a1p+e1p))/(1-psi12*psi21));
		
		z1l = c(z1l, z1);
		z2l = c(z2l, z2);
	}
	oldz1m = p1.getValue("z1m");	
	p1.setValue("z1m", c(oldz1m, z1l));	
	oldz2m = p1.getValue("z2m");	
	p1.setValue("z2m", c(oldz2m, z2l));	
	
//	choose the phenotype that's under selection
	phenotype = z2l;
	optimum = 0;
	inds.fitnessScaling = 1.0 + dnorm(optimum - phenotype, 0.0, 5.0);
	inds.tagF = phenotype;

}

s1 30 early() {
	cat("-------------------------------\n");
	cat("Output for end of cycle " + (sim.cycle - 1) + ":\n\n");
	
	// Output population fitness values
	cat("p1 mean fitness = " + mean(p1.cachedFitness(NULL)) + "\n");
	
	// Output population additive QTL-based phenotypes
	cat("p1 mean phenotype under selection = " + mean(p1.individuals.tagF) + "\n");
	
	z1m = p1.getValue("z1m");	
	z2m = p1.getValue("z2m");	
	
	
	cat("p1 mean z1 = " + mean(z1m[(size(z1m)-pop_size):(size(z1m)-1)]) + "\n");
	cat("p1 mean z2 = " + mean(z2m[(size(z2m)-pop_size):(size(z2m)-1)]) + "\n");
	
	// Output frequencies of +1/-1 alleles at the QTLs
	muts = sim.mutationsOfType(m2);
	plus = muts[muts.selectionCoeff == 1.0];
	minus = muts[muts.selectionCoeff == -1.0];
	
	cat("\nOverall frequencies:\n\n");
	for (q in Q1)
	{
		qPlus = plus[plus.position == q];
		qMinus = minus[minus.position == q];
		pf = sum(sim.mutationFrequencies(NULL, qPlus));
		mf = sum(sim.mutationFrequencies(NULL, qMinus));
		
		cat("   QTL1 " + q + ": f(+) == " + pf + ", f(-) == " + mf + "\n");
	}
	cat("");
	
	muts = sim.mutationsOfType(m3);
	plus = muts[muts.selectionCoeff == 1.0];
	minus = muts[muts.selectionCoeff == -1.0];
	
	for (q in Q2)
	{
		qPlus = plus[plus.position == q];
		qMinus = minus[minus.position == q];
		pf = sum(sim.mutationFrequencies(NULL, qPlus));
		mf = sum(sim.mutationFrequencies(NULL, qMinus));
		
		cat("   QTL2 " + q + ": f(+) == " + pf + ", f(-) == " + mf + "\n");
	}
}
